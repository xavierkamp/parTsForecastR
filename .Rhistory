require(tsForecastR)
!require(tsForecastR)
devtools::document()
install.packages(c("devtools", "doParallel", "foreach", "magrittr", "stringr"))
library(devtools)
install.packages(devtools)
install.packages("devtools")
devtools::document()
install.packages(c("devtools", "doParallel", "foreach", "magrittr", "stringr"))
devtools::document()
devtools::document()
load("C:/Users/Xkamphaus/Dropbox (Kamphaus)/Github_tsForecastR/parTsForecastR/.RData")
#'
#' # Generate forecasts on past dates with multiple iterations and a rolling window
#' fc <- generate_fc_par(AirPassengers,
#'                       model_names = "tbats",
#'                       fc_horizon = 6,
#'                       backtesting_opt = list(use_bt = TRUE,
#'                                              nb_iters = 6))
#' ## End (Not run)
#' @return A list
#' @export
generate_fc_par <- function(mts_data, fc_horizon = 12,
xreg_data = NULL,
backtesting_opt = list(use_bt = FALSE,
nb_iters = 1,
method = c("rolling",
"moving"),
sample_size = c("expanding",
"fixed")),
model_names = c("arima", "ets", "tbats", "bsts",
"snaive", "nnetar", "stl",
"lstm_keras", "automl_h2o"),
preprocess_fct = NULL,
models_args = NULL,
save_fc_to_file = NULL,
time_id = base::Sys.time(),
nb_cores = 1,
...) {
`%>%` <- magrittr::`%>%`
`%do%` <- foreach::`%do%`
`%dopar%` <- foreach::`%dopar%`
if (!require(tsForecastR)) {
devtools::install_github("xavierkamp/tsForecastR",
auth_token = "bdea47dff495e7faaca2839db3942d18fed75a25")
library(tsForecastR)
}
library(tsForecastR)
model_output <- base::list()
mts_data_xts <- check_data_sv_as_xts(mts_data, default_colname = "time_series")
xreg_data_xts <- check_data_sv_as_xts(xreg_data, default_colname = "feature")
if (!base::is.null(xreg_data_xts)) {
keys_in_col <- base::colnames(xreg_data_xts) %>% stringr::str_detect("__")
print(base::paste("Info about specified regressors: \n",
"Number of total features: ",
base::ncol(xreg_data_xts), "\n",
"Number of shared features (colnames w/o '__'): ",
base::sum(!keys_in_col), "\n",
"Number of ts specific features (ts_name + '__' + feature_name): ",
base::sum(keys_in_col),
sep = ""))
}
fc_horizon <- check_fc_horizon(fc_horizon)
model_names <- check_model_names(model_names)
models_args <- check_models_args(models_args, model_names)
backtesting_opt <- check_backtesting_opt(backtesting_opt)
save_fc_to_file <- check_save_fc_to_file(save_fc_to_file)
nb_cores <- check_nb_cores(nb_cores)
time_id <- check_time_id(time_id)
ind_seq <- base::seq(base::ncol(mts_data_xts))
cl <- parallel::makeCluster(nb_cores)
doParallel::registerDoParallel(cl)
model_output_ls <-
foreach::foreach(ind = ind_seq,
.export = c("mts_data_xts",
"xreg_data_xts",
"fc_horizon",
"backtesting_opt",
"save_fc_to_file",
"preprocess_fct",
"time_id",
"models_args")) %dopar% {
library(tsForecastR)
model_names_parall_proc <- model_names[model_names != "automl_h2o"]
ts_data_xts <- univariate_xts(mts_data_xts, ind)
ts_colname <- base::colnames(ts_data_xts)
model_output_cores <- base::list()
for (model_name in model_names_parall_proc) {
base::eval(base::parse(text = base::paste("model_output_cores$", ts_colname, "$",
model_name, " <- ",
"generate_fc_", model_name, "(",
"ts_data_xts = ts_data_xts, ",
"xreg_xts = xreg_data_xts, ",
"fc_horizon = fc_horizon, ",
"backtesting_opt = backtesting_opt, ",
"save_fc_to_file = save_fc_to_file, ",
"preprocess_fct = preprocess_fct, ",
"time_id = time_id, ",
model_name, "_arg = models_args$",
model_name, "_arg)",
sep = "")))
}
return(model_output_cores)
}
model_output <- model_output_ls[[1]]
parallel::stopCluster(cl)
foreach::foreach(ind = ind_seq) %do% {
model_names_parall_proc <- model_names[model_names == "automl_h2o"]
ts_data_xts <- univariate_xts(mts_data_xts, ind)
ts_colname <- base::colnames(ts_data_xts)
for (model_name in model_names_parall_proc) {
base::eval(base::parse(text = base::paste("model_output$", ts_colname, "$",
model_name, " <- ",
"generate_fc_", model_name, "(",
"ts_data_xts = ts_data_xts, ",
"xreg_xts = xreg_data_xts, ",
"fc_horizon = fc_horizon, ",
"backtesting_opt = backtesting_opt, ",
"save_fc_to_file = save_fc_to_file, ",
"preprocess_fct = preprocess_fct, ",
"time_id = time_id, ",
"nb_cores = nb_cores, ",
model_name, "_arg = models_args$",
model_name, "_arg)",
sep = "")))
}
}
return(model_output)
}
fc <- generate_fc_par(AirPassengers)
install.packages("packrat")
if (!require(tsForecastR)) {
devtools::install_github("xavierkamp/tsForecastR",
auth_token = "bdea47dff495e7faaca2839db3942d18fed75a25")
library(tsForecastR)
}
if (!require(tsForecastR)) {
devtools::install_github("xavierkamp/tsForecastR",
auth_token = "bdea47dff495e7faaca2839db3942d18fed75a25")
library(tsForecastR)
}
if (!require(tsForecastR)) {
devtools::install_github("xavierkamp/tsForecastR",
auth_token = "bdea47dff495e7faaca2839db3942d18fed75a25")
library(tsForecastR)
}
devtools::install_github("xavierkamp/tsForecastR",
auth_token = "bdea47dff495e7faaca2839db3942d18fed75a25")
packrat::on()
devtools::install_github("xavierkamp/tsForecastR",
auth_token = "bdea47dff495e7faaca2839db3942d18fed75a25")
